{-# START_FILE package.yaml #-}
name:                {{name}}
version:             {{version}}{{^version}}0.1.0.0{{/version}}
#synopsis:
#description:
homepage:            https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme
license:             BSD3
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2019{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
category:            {{category}}{{^category}}Web{{/category}}
extra-source-files:
- README.md

dependencies:
- base >= 4.7 && < 5
- text
- text-show
- string-interpolate
- HsYAML
- lens
- extra
- bytestring
- random
- containers
- warp
- wai
- yesod
- http-types
- aeson
- conferer
- conferer-warp

# The library contains all of our application code.
# The executable defined below is just a thin wrapper.
library:
  source-dirs: src

# Runnable executable for our application
executables:
  {{name}}:
    source-dirs: app
    main: Main.hs
    dependencies:
    - {{name}}
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

# Test suite
tests:
  {{name}}-test:
    source-dirs: test
    main: Main.hs
    dependencies:
    - {{name}}
    - tasty
    - tasty-hspec
    ghc-options:
    - -rtsopts
    - -threaded
    - -with-rtsopts=-N

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE src/Lib.hs #-}
module Lib where

sum' :: Int -> Int -> Int
sum' a b = a + b

{-# START_FILE src/Web/Data.hs #-}
module Web.Data (
  Person (..),
  Organization (..)
) where

import           Data.Text (Text)

data Person = Person
  { name :: Text,
    age  :: Int
  }
  deriving (Show)

data Organization = Organization
  {
    organizationName      :: Text
    , organizationAddress :: Text
  }
  deriving (Show)

{-# START_FILE src/Web/Serde.hs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards   #-}

module Web.Serde where

import           Data.Aeson       (FromJSON (..), KeyValue ((.=)), Object,
                                   ToJSON (..), object, (.:))
import           Data.Aeson.Types (Value (Object))
import           Web.Data         (Organization (..), Person (..))

instance ToJSON Person where
  toJSON Person {..} =
    object
      [ "name" .= name,
        "age" .= age
      ]

instance ToJSON Organization where
  toJSON Organization {..} =
    object
    [
      "name" .= organizationName
      , "address" .= organizationAddress
    ]

instance FromJSON Organization where
  parseJSON (Object v) = Organization
    <$> v .: "name"
    <*> v .: "address"


{-# START_FILE src/Web/Control.hs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE TemplateHaskell   #-}
{-# LANGUAGE TypeFamilies      #-}
{-# LANGUAGE ViewPatterns      #-}
{-# OPTIONS_GHC -Wno-orphans #-}

module Web.Control where

import           Data.Aeson                 (encode)
import qualified Data.ByteString.Lazy.Char8 as L
import           Data.Maybe                 (fromMaybe)
import           Data.Text                  (Text)
import           Web.Data                   (Organization (..), Person (..))
import           Web.Serde                  ()
import           Yesod

run :: IO ()
run = do
  let json = encode $ Person "Antonel" 30
  L.putStrLn json

data App = App

mkYesod "App" [parseRoutes|
/                       HomeR               GET
/greeting               GreetingR           GET
/echo/#Text             EchoR               GET
/person/info            PersonInfoR         GET
/organization/info      OrganizationInfoR   GET
/organization           OrganizationR       POST
|]

instance Yesod App

mimeType :: ContentType
mimeType = "text/haskell-show"

getHomeR :: Handler TypedContent
getHomeR =
  return $ TypedContent mimeType $ toContent $ show person
  where
    person = Person "Antonel" 50

getGreetingR :: Handler Html
getGreetingR = defaultLayout [whamlet|<h1>Hello from #{name person}|]
  where
    person = Person "Antonel" 50

getEchoR :: Text -> Handler Html
getEchoR name = defaultLayout [whamlet|<h1>Hello #{name}!|]

getPersonInfoR :: Handler Html
getPersonInfoR = do
  nameMaybe <- lookupGetParam "name"
  let name = fromMaybe "no name" nameMaybe
  defaultLayout [whamlet|<h1>Hello #{name}!|]

getOrganizationInfoR :: Handler Value
getOrganizationInfoR = returnJson org

postOrganizationR :: Handler Value
postOrganizationR = do
  organization <- requireCheckJsonBody :: Handler Organization
  let newOrg  = Organization {
    organizationName = organizationName organization,
    organizationAddress = "Amsterdam"
  }
  returnJson newOrg

org :: Organization
org = Organization { organizationName = "ING", organizationAddress = "Romania"}

{-# START_FILE src/Web/Runner.hs #-}
module Web.Runner where

import Yesod
import Web.Control

run :: IO ()
run = warp {{warp-port}}{{^warp-port}}3000{{/warp-port}} App

{-# START_FILE app/Main.hs #-}
module Main where

import Web.Runner

main :: IO ()
main = run

{-# START_FILE test/Main.hs #-}
-- Tasty makes it easy to test your code. It is a test framework that can
-- combine many different types of tests into one suite. See its website for
-- help: <http://documentup.com/feuerbach/tasty>.
import qualified Test.Tasty
-- Hspec is one of the providers for Tasty. It provides a nice syntax for
-- writing tests. Its website has more info: <https://hspec.github.io>.
import Test.Tasty.Hspec
import Lib

main :: IO ()
main = do
    test <- testSpec "{{name}}" spec
    Test.Tasty.defaultMain test

spec :: Spec
spec = parallel $ do
    it "Sum of 1 and 1 is 2" $ do
        sum' 1 1 `shouldBe` 2

{-# START_FILE check/http/test.http #-}
# REST commands

### Home
GET http://localhost:3000
Accept: text/plain

### Greeting
GET http://localhost:3000/greeting
Accept: text/html

### Echo
GET http://localhost:3000/echo/Tony
Accept: text/html

### Person info
GET http://localhost:3000/person/info?name=Antonel-Ernest.Pazargic
Accept: text/html

### Organization info
GET http://localhost:3000/organization/info
Accept: application/json

### New Organization
POST http://localhost:3000/organization
Content-Type: application/json

{
  "address": "Romania",
  "name": "ING"
}

### Not found
GET http://localhost:3000/notfound
Accept: text/plain

{-# START_FILE README.md #-}
# {{name}}

## How to run and test the application

  - Build and run the web application (REST service)
  `stack build --fast && stack exec -- {{name}}`

  - Run tests
  `stack test`

## See also

  - [haskell common commands](doc/haskell_common_commands.md)
  - [vs code shortcuts](doc/vs_code_shortcuts.md)

{-# START_FILE .gitignore #-}
dist*
static/tmp/
static/combined/
config/client_session_key.aes
*.hi
*.o
*.sqlite3
*.sqlite3-shm
*.sqlite3-wal
.hsenv*
cabal-dev/
.stack-work/
.stack-work-devel/
yesod-devel/
.cabal-sandbox
cabal.sandbox.config
.DS_Store
*.swp
*.keter
*~
\#*
{{name}}.cabal
# Vs code
.history/

{-# START_FILE CHANGELOG.md #-}
# Change log

{{name}} uses [Semantic Versioning][].
The change log is available through the [releases on GitHub][].

[Semantic Versioning]: http://semver.org/spec/v2.0.0.html
[releases on GitHub]: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}/releases

{-# START_FILE .ghci #-}
:set prompt "\ESC[95m\STXλ. \ESC[m\STX"
:set prompt-cont "\ESC[1;32mλ| \ESC[m"

-- ============================================
-- warns and sanity checking
-- ============================================
-- :set -Wunrecognised-pragmas
-- :set -Wall
:set -XOverloadedStrings
-- :set -XScopedTypeVariables
-- :set -Wempty-enumerations
-- :set -Wincomplete-patterns

-- :set -v

-- :set -XGADTs
-- :set -XLambdaCase
-- :set -XNegativeLiterals
-- :set -XTypeOperators
-- :set -XTupleSections
-- :set -XFlexibleContexts
-- :set -XTypeApplications

-- :set -package QuickCheck

-- Pretty printing of it
-- :set -package ghci-pretty
-- import IPPrint.Colored
-- :set -interactive-print=IPPrint.Colored.cpprint

-- ============================================
-- MUST BE AT THE END: And unset some warns
-- ============================================
-- :set -Wno-missing-signatures
-- :set -Wno-type-defaults

{-# START_FILE stack.yaml #-}
# GHC supported by VS code Haskell extension: https://github.com/haskell/vscode-haskell#supported-ghc-versions
# LTS resolvers: https://www.stackage.org/
resolver: {{lts-version}}{{^lts-version}}lts-17.5{{/lts-version}}
packages:
- .
extra-deps:
  - bytestring-0.10.12.0

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2019{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE doc/vs_code_shortcuts.md #-}
# VS code shortcuts

## General

| shortcut     | Description                                    | Notes |
| ------------ | ---------------------------------------------- | ----- |
| ctrl shift P | Show all commands                              |       |
| ctrl P       | Search files, search in file by symbol or line |       |
| ctrl -       | Back                                           |       |
| cmd I        | Trigger suggest                                |       |
| cmd shift O  | Go to symbol in the edit                       |       |

## Workspace

| shortcut    | Description                   | Notes |
| ----------- | ----------------------------- | ----- |
| ctrl alt w  | quick switch window           |       |
| cmd T       | Go to symbol in the workspace |       |
| ctrl R      | Open recent                   |       |
| cmd shift N | New window                    |       |
| cmd shift W | Close window                  |       |
| cmd K cmd W | close all editors             |       |

## Editor basics

| shortcut    | Description     | Notes |
| ----------- | --------------- | ----- |
| cmd k cmd i | show hover      |       |
| cmd shift k | delete line     |       |
| alt shift F | Format document |       |

## Editor IDE

| shortcut     | Description                           | Notes |
| ------------ | ------------------------------------- | ----- |
| cmd d        | Find next occurrence of the selection |       |
| cmd .        | Quick fix                             |       |
| alt F8       | Next problem                          |       |
| cmd shift o  | Go to symbol                          |       |
| ctrl shift r | Refactoring                           |       |
| cmd I        | Trigger suggest                       |       |

## Run debug

| shortcut | Description   | Notes |
| -------- | ------------- | ----- |
| F8       | Run tests     |       |
| F6       | Run a task... |       |

## Navigation

| Shortcut      | Description         | Notes |
| ------------- | ------------------- | ----- |
| ctrl -        | Back                |       |
| F12           | Go to definition    |       |
| Alt F12       | Pick definition     |       |
| Alt Shift F12 | Find all references |       |
| Ctrl G        | Go to line          |       |

## Activity bar

| Shortcut     | Description         | Notes |
| ------------ | ------------------- | ----- |
| Cmd Shift E  | Open Explored       |       |
| Ctrl Shift G | Open Source Control |       |
| Cmd Shift M  | Open Problems       |       |

{-# START_FILE doc/haskell_common_commands.md #-}

# Haskell common commands

## Stack commands

  - `stack build --fast && stack exec -- {{name}}`
  - `stack test`
  - `stack haddock`
  - debug and get documentation with file watch
    `stack build --fast --haddock-deps --file-watch`

## Formatters config

My favorite formatter is `Stylish Haskell`.
See how to configure Haskell formatters https://mmhaskell.com/blog/2018/8/6/keeping-it-clean-haskell-code-formatters

- Install with stylish-haskell

  `stack install stylish-haskell`

- Make the stylish-haskell the default formatter in your editor of choice (mine is vs code)

- generate the default format configuration

  `stylish-haskell --defaults > .stylish-haskell.yaml`

{-# START_FILE doc/road_to_production.md #-}
# Haskell road to PRODUCTION

- [ ] Setup (visual studio code):
  - [ ] [Stack](https://docs.haskellstack.org/en/stable/README/)
  - [ ] Proxy
  - [ ] Private Repo (Artifactory)
- [ ] Logging
- [ ] Data Modeling with Haskell. Data structures
  - https://haskell-at-work.com/episodes/2018-01-19-domain-modelling-with-haskell-data-structures.html
- [ ] Testing
  - [ ] [QuickCheck](https://hackage.haskell.org/package/QuickCheck)
- [ ] Work with (large) Files
- [ ] RESTful API
  - [ ] Yesod: [here](https://hackage.haskell.org/package/yesod) and [here](https://www.yesodweb.com)
  - [ ] [Servant] (https://docs.servant.dev/en/stable/tutorial/ApiType.html)
  - [ ] [Scotty] (https://hackage.haskell.org/package/scotty)
- [ ] HTTP client
  - [ ] [Simple http-client](https://github.com/snoyberg/http-client/blob/master/TUTORIAL.md)
  - [ ] [http-tls client](<[http-client-tls](https://www.stackage.org/package/http-client-tls)>)
- [ ] CLI
  - [ ] [optparse-applicative](https://hackage.haskell.org/package/optparse-applicative)
- [ ] work with JSON
  - [ ] [Aeson](https://www.stackage.org/lts-16.22/package/aeson-1.4.7.1)
- [ ] Web Application
  - [ ] [yesodweb](https://www.yesodweb.com/book/widgets)
- [ ] Persistence
  - [ ] [esqueleto](https://hackage.haskell.org/package/esqueleto)
- [ ] Common Effects
  - [ ] Random
  - [ ] UUID
  - [ ] Scheduler
- [ ] DSL
  - [ ] [Polysemy](polysemy is a library for writing high-power, low-boilerplate domain specific languages). More about polysemy
    - [here](https://haskell-explained.gitlab.io/blog/posts/2019/07/28/polysemy-is-cool-part-1/index.html)
    - [here](https://youtu.be/idU7GdlfP9Q?t=1394)

## Low priority

- [ ] Developer experience
  - [ ] vs code setup
  - [ ] Debugging (vs code)
- [ ] work with MySQL
- [ ] work with XML
- [ ] work with NoSQL
- [ ] pipeline (Microsoft Azure DevOps, Gitlab actions)
- [ ] Performance
- [ ] Reactive Programming ([Reflex](https://hackage.haskell.org/package/reflex))
- [ ] Data Streaming ([conduit](https://github.com/snoyberg/conduit#readme))
- [ ] Versioning
  - [ ] Different project with different toolchain versions (stack, cabal, ghc, ghci, ghcid)
- [ ] Accessing remote data concurrently
  - [ ] [Haxl](http://hackage.haskell.org/package/haxl)

## Releasing internal/external resources
- [ ] [bracket](https://wiki.haskell.org/Bracket_pattern)

## Exception handling
  - [try](https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Exception.html#v:try)
  - [catch](https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Exception.html#g:5)
  - [throw](https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Exception.html#g:2)

## Popular effects

- [ ] logging
- [ ] random numbers
  - import System.Random -> [link](https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html)
- [ ] UUID
- [ ] read/write to file
- [ ] read/write to console
- [ ] current date/time
- [ ] metrics
- [ ] tracing

## Data Structures

{-# START_FILE .stylish-haskell.yaml #-}

# stylish-haskell configuration file
# ==================================

# The stylish-haskell tool is mainly configured by specifying steps. These steps
# are a list, so they have an order, and one specific step may appear more than
# once (if needed). Each file is processed by these steps in the given order.
steps:
  # Convert some ASCII sequences to their Unicode equivalents. This is disabled
  # by default.
  # - unicode_syntax:
  #     # In order to make this work, we also need to insert the UnicodeSyntax
  #     # language pragma. If this flag is set to true, we insert it when it's
  #     # not already present. You may want to disable it if you configure
  #     # language extensions using some other method than pragmas. Default:
  #     # true.
  #     add_language_pragma: true

  # Format module header
  #
  # Currently, this option is not configurable and will format all exports and
  # module declarations to minimize diffs
  #
  # - module_header:
  #     # How many spaces use for indentation in the module header.
  #     indent: 4
  #
  #     # Should export lists be sorted?  Sorting is only performed within the
  #     # export section, as delineated by Haddock comments.
  #     sort: true
  #
  #     # See `separate_lists` for the `imports` step.
  #     separate_lists: true

  # Format record definitions. This is disabled by default.
  #
  # You can control the layout of record fields. The only rules that can't be configured
  # are these:
  #
  # - "|" is always aligned with "="
  # - "," in fields is always aligned with "{"
  # - "}" is likewise always aligned with "{"
  #
  # - records:
  #     # How to format equals sign between type constructor and data constructor.
  #     # Possible values:
  #     # - "same_line" -- leave "=" AND data constructor on the same line as the type constructor.
  #     # - "indent N" -- insert a new line and N spaces from the beginning of the next line.
  #     equals: "indent 2"
  #
  #     # How to format first field of each record constructor.
  #     # Possible values:
  #     # - "same_line" -- "{" and first field goes on the same line as the data constructor.
  #     # - "indent N" -- insert a new line and N spaces from the beginning of the data constructor
  #     first_field: "indent 2"
  #
  #     # How many spaces to insert between the column with "," and the beginning of the comment in the next line.
  #     field_comment: 2
  #
  #     # How many spaces to insert before "deriving" clause. Deriving clauses are always on separate lines.
  #     deriving: 2
  #
  #     # How many spaces to insert before "via" clause counted from indentation of deriving clause
  #     # Possible values:
  #     # - "same_line" -- "via" part goes on the same line as "deriving" keyword.
  #     # - "indent N" -- insert a new line and N spaces from the beginning of "deriving" keyword.
  #     via: "indent 2"
  #
  #     # Sort typeclass names in the "deriving" list alphabetically.
  #     sort_deriving: true
  #
  #     # Wheter or not to break enums onto several lines
  #     #
  #     # Default: false
  #     break_enums: false
  #
  #     # Whether or not to break single constructor data types before `=` sign
  #     #
  #     # Default: true
  #     break_single_constructors: true
  #
  #     # Whether or not to curry constraints on function.
  #     #
  #     # E.g: @allValues :: Enum a => Bounded a => Proxy a -> [a]@
  #     #
  #     # Instead of @allValues :: (Enum a, Bounded a) => Proxy a -> [a]@
  #     #
  #     # Default: false
  #     curried_context: false

  # Align the right hand side of some elements.  This is quite conservative
  # and only applies to statements where each element occupies a single
  # line.
  # Possible values:
  # - always - Always align statements.
  # - adjacent - Align statements that are on adjacent lines in groups.
  # - never - Never align statements.
  # All default to always.
  - simple_align:
      cases: always
      top_level_patterns: always
      records: always
      multi_way_if: always

  # Import cleanup
  - imports:
      # There are different ways we can align names and lists.
      #
      # - global: Align the import names and import list throughout the entire
      #   file.
      #
      # - file: Like global, but don't add padding when there are no qualified
      #   imports in the file.
      #
      # - group: Only align the imports per group (a group is formed by adjacent
      #   import lines).
      #
      # - none: Do not perform any alignment.
      #
      # Default: global.
      align: global

      # The following options affect only import list alignment.
      #
      # List align has following options:
      #
      # - after_alias: Import list is aligned with end of import including
      #   'as' and 'hiding' keywords.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #   >                                          init, last, length)
      #
      # - with_alias: Import list is aligned with start of alias or hiding.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #   >                                 init, last, length)
      #
      # - with_module_name: Import list is aligned `list_padding` spaces after
      #   the module name.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #                          init, last, length)
      #
      #   This is mainly intended for use with `pad_module_names: false`.
      #
      #   > import qualified Data.List as List (concat, foldl, foldr, head,
      #                          init, last, length, scanl, scanr, take, drop,
      #                          sort, nub)
      #
      # - new_line: Import list starts always on new line.
      #
      #   > import qualified Data.List      as List
      #   >     (concat, foldl, foldr, head, init, last, length)
      #
      # - repeat: Repeat the module name to align the import list.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head)
      #   > import qualified Data.List      as List (init, last, length)
      #
      # Default: after_alias
      list_align: after_alias

      # Right-pad the module names to align imports in a group:
      #
      # - true: a little more readable
      #
      #   > import qualified Data.List       as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #   > import qualified Data.List.Extra as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #
      # - false: diff-safe
      #
      #   > import qualified Data.List as List (concat, foldl, foldr, init,
      #   >                                     last, length)
      #   > import qualified Data.List.Extra as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #
      # Default: true
      pad_module_names: true

      # Long list align style takes effect when import is too long. This is
      # determined by 'columns' setting.
      #
      # - inline: This option will put as much specs on same line as possible.
      #
      # - new_line: Import list will start on new line.
      #
      # - new_line_multiline: Import list will start on new line when it's
      #   short enough to fit to single line. Otherwise it'll be multiline.
      #
      # - multiline: One line per import list entry.
      #   Type with constructor list acts like single import.
      #
      #   > import qualified Data.Map as M
      #   >     ( empty
      #   >     , singleton
      #   >     , ...
      #   >     , delete
      #   >     )
      #
      # Default: inline
      long_list_align: inline

      # Align empty list (importing instances)
      #
      # Empty list align has following options
      #
      # - inherit: inherit list_align setting
      #
      # - right_after: () is right after the module name:
      #
      #   > import Vector.Instances ()
      #
      # Default: inherit
      empty_list_align: inherit

      # List padding determines indentation of import list on lines after import.
      # This option affects 'long_list_align'.
      #
      # - <integer>: constant value
      #
      # - module_name: align under start of module name.
      #   Useful for 'file' and 'group' align settings.
      #
      # Default: 4
      list_padding: 4

      # Separate lists option affects formatting of import list for type
      # or class. The only difference is single space between type and list
      # of constructors, selectors and class functions.
      #
      # - true: There is single space between Foldable type and list of it's
      #   functions.
      #
      #   > import Data.Foldable (Foldable (fold, foldl, foldMap))
      #
      # - false: There is no space between Foldable type and list of it's
      #   functions.
      #
      #   > import Data.Foldable (Foldable(fold, foldl, foldMap))
      #
      # Default: true
      separate_lists: true

      # Space surround option affects formatting of import lists on a single
      # line. The only difference is single space after the initial
      # parenthesis and a single space before the terminal parenthesis.
      #
      # - true: There is single space associated with the enclosing
      #   parenthesis.
      #
      #   > import Data.Foo ( foo )
      #
      # - false: There is no space associated with the enclosing parenthesis
      #
      #   > import Data.Foo (foo)
      #
      # Default: false
      space_surround: false

      # Enabling this argument will use the new GHC lib parse to format imports.
      #
      # This currently assumes a few things, it will assume that you want post
      # qualified imports. It is also not as feature complete as the old
      # imports formatting.
      #
      # It does not remove redundant lines or merge lines. As such, the full
      # feature scope is still pending.
      #
      # It _is_ however, a fine alternative if you are using features that are
      # not parseable by haskell src extensions and you're comfortable with the
      # presets.
      #
      # Default: false
      ghc_lib_parser: false

  # Language pragmas
  - language_pragmas:
      # We can generate different styles of language pragma lists.
      #
      # - vertical: Vertical-spaced language pragmas, one per line.
      #
      # - compact: A more compact style.
      #
      # - compact_line: Similar to compact, but wrap each line with
      #   `{-#LANGUAGE #-}'.
      #
      # Default: vertical.
      style: vertical

      # Align affects alignment of closing pragma brackets.
      #
      # - true: Brackets are aligned in same column.
      #
      # - false: Brackets are not aligned together. There is only one space
      #   between actual import and closing bracket.
      #
      # Default: true
      align: true

      # stylish-haskell can detect redundancy of some language pragmas. If this
      # is set to true, it will remove those redundant pragmas. Default: true.
      remove_redundant: false

      # Language prefix to be used for pragma declaration, this allows you to
      # use other options non case-sensitive like "language" or "Language".
      # If a non correct String is provided, it will default to: LANGUAGE.
      language_prefix: LANGUAGE

  # Replace tabs by spaces. This is disabled by default.
  # - tabs:
  #     # Number of spaces to use for each tab. Default: 8, as specified by the
  #     # Haskell report.
  #     spaces: 8

  # Remove trailing whitespace
  - trailing_whitespace: {}

  # Squash multiple spaces between the left and right hand sides of some
  # elements into single spaces. Basically, this undoes the effect of
  # simple_align but is a bit less conservative.
  # - squash: {}

# A common setting is the number of columns (parts of) code will be wrapped
# to. Different steps take this into account.
#
# Set this to null to disable all line wrapping.
#
# Default: 80.
columns: 80

# By default, line endings are converted according to the OS. You can override
# preferred format here.
#
# - native: Native newline format. CRLF on Windows, LF on other OSes.
#
# - lf: Convert to LF ("\n").
#
# - crlf: Convert to CRLF ("\r\n").
#
# Default: native.
newline: native

# Sometimes, language extensions are specified in a cabal file or from the
# command line instead of using language pragmas in the file. stylish-haskell
# needs to be aware of these, so it can parse the file correctly.
#
# No language extensions are enabled by default.
# language_extensions:
  # - TemplateHaskell
  # - QuasiQuotes

# Attempt to find the cabal file in ancestors of the current directory, and
# parse options (currently only language extensions) from that.
#
# Default: true
cabal: true

{-# START_FILE doc/monadic functions.md #-}
# Monadic functions

- __import Control.Monad__

## Semigroup

- __(<>)__

  ```Haskell
  [1..3] <> [4,5]         -- [1,2,3,4,5]
  Just [1] <> Just [2]    -- Just [1,2]
  ```

## Monoid

- __mempty__

  ```Haskell
  [1,2,3] <> mempty` -- [1,2,3]
  ```

## Functor
---

- __fmap__

  ```Haskell
  fmap (+1) [1,2,3] -- [2,3,4]
  ```

- __(<$>)__ infix synonym for fmap

  ```Haskell
  (+1) <$> pure 1  -- 2
  ```

- __(<$)__

  ```Haskell
  True <$ Just False -- Just True
  10 <$ pure 1       -- 10
  ```

## Applicative
---

- __pure__ or __return__

  ```Haskell
  pure 10
  ```

- __(>>=)__

  ```Haskell
  Just 1 >>= \a -> Just 2 -- Just 2
  [1,2] >>= \a -> [a,a]   -- [1,1,2,2]
  ```

- __(=<<)__

  ```Haskell
  (take 2 . repeat) =<< [1,2]  - [1,1,2,2]
  ```

- __<*>__ Sequential application

  ```Haskell
  pure (+1) <*> pure (2) -- pure 3
  ```

- __liftA__

  ```Haskell
  liftA (+1) (pure 1) -- 2
  liftA (+1) [1,2,3]  -- [2,3,4]
  ```

## Monadic functions
---

- __(>>)__ execute 2 actions and discard the result of the first one

  ```Haskell
  getName msg = putStrLn msg >> getLine
  ```

- __forM (forM_)__

  ```Haskell
  forM_ (Just 1) print -- 1
  ```

- __mapM (mapM_)__

  ```Haskell
  mapM_ print (Just 1) -- 1
  ```

- __replicateM (replicateM_)__

  ```Haskell
  λ > replicateM_ 2 $ print "hello"
  "hello"
  "hello"
  ```

- __when__

  ```Haskell
  λ > debug = True
  λ > when debug $ putStrLn "Debug"
  Debug
  ```
- __unless__

  ```Haskell
  λ > debug = True
  λ > unless debug $ putStrLn "Debug" -- nothing printed
  ```

- __liftM__

  ```Haskell
  liftM (+1) $ Just 10 -- Just 11
  ```

- __liftM2__

  ```Haskell
  liftM2 (+) (Just 10) (Just 1) -- Just 11
  ```

- __filterM__

  ```Haskell
  keep :: [Int] -> IO [Int]
  keep = filterM doKeep
      where
          doKeep :: Int -> IO Bool
          doKeep x
            |   x >= 0 = pure True
            | otherwise = pure False
  ```

- __FoldM__

  ```Haskell
  sum'' :: [Int] -> IO Int
  sum'' = foldM (\a b -> pure (a + b)) 0
  ```
